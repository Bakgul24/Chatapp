@page
@model ChatApp.Pages.IndexModel
@{
    ViewData["Title"] = "ChatApp";

    <script>

        function checkAuthentication() {
            var isAuthenticated = sessionStorage.getItem("isAuthenticated");
            if (!isAuthenticated) {
                window.location.href = "/Login";
            }
        }

        function checkAuthenticationBool() {
            var isAuthenticated = sessionStorage.getItem("isAuthenticated");

            if (!isAuthenticated) {
                return false;
            }

            return true;
        }

    </script>
}
@section Scripts {
    <script src="~/js/signalr/signalr.js"></script>
    <script>
        var toMailSession = sessionStorage.getItem('toMail')
        var toName = sessionStorage.getItem('toFullName')

        window.onload = function () {
            if(toName === '' || toName === null)
                window.location.href = "/Home";

            
                document.getElementById('toName').innerText = sessionStorage.getItem('toFullName')
            sessionStorage.setItem('toFullName','')
            checkAuthentication();
        };
        
        if (checkAuthenticationBool()) {
            var userName = sessionStorage.getItem("userName") || ""; // Retrieve userName from localStorage or set a default value
            var connection = new signalR.HubConnectionBuilder()
                .withUrl(`/chatHub?userName=${encodeURIComponent(userName)}`)
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

                connection.start().then(function () {
                document.getElementById("btnSendMessage").disabled = false;
            }).catch(function (err) {
                return console.error(err.toString());
            });

            connection.on("MessageRecieved",  (toUser, message, toMail, toUserMail) => {
                if (toUserMail == toMailSession && toMail == userName || toMailSession == toMail && toUserMail == userName) {
                    var ul = document.createElement("ul"); // Create a new ul element
                    var li = document.createElement("li");
                    ul.appendChild(li); // Append li to ul

                    if(toMailSession == toMail && toUserMail == userName)
                        {
                            ul.style = "display: flex; padding: 10px;"
                        li.textContent = `${toUser} : ${message}`;

                        }

                    if (toUserMail == toMailSession && toMail == userName)
                        {
                        ul.style = "justify-content: end; display: flex; padding: 10px; max-width: 98%;"
                        li.style = "direction: rtl;"
                        li.textContent = `${message} : ${toUser}`;
                         
                        }

                        

                    document.getElementById("messages").appendChild(ul); // Append ul to the messages div

                    

                    // Scroll to the end of the div
                    document.getElementById("messages").scrollTop = document.getElementById("messages").scrollHeight;
                }
            });

            document.getElementById("btnSendMessage").addEventListener("click", function (event) {
                var message = document.getElementById("txtMessage").value;

                if (message !== "")
                {
                    connection.invoke("Send", message, toMailSession)
                event.preventDefault();

                document.getElementById("txtMessage").value = ""
                }
                
            });
        }
    </script>
}

<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: Verdana, monospace, sans-serif;
            font-size: 12px;
            font-weight: bold;
            text-align: justify;
            background-image: url('background.jpeg');
        }

        .buttons-container {
            width: 100%;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        ol, ul {
            padding-left: 1rem;
        }

        dl, ol, ul {
            margin-top: 0;
            margin-bottom: 0px;
        }

        button {
            background: white;
            border: solid 2px black;
            padding: .375em 1.125em;
            font-size: 1rem;
        }

        .button-arounder {
            font-size: 0.6rem;
            background: #93BFA3;
            color: hsl(190deg, 10%, 95%);
            box-shadow: 0 0px 0px hsla(190deg, 15%, 5%, .2);
            transfrom: translateY(0);
            border-top-left-radius: 0px;
            border-top-right-radius: 0px;
            border-bottom-left-radius: 0px;
            border-bottom-right-radius: 0px;
            --dur: .15s;
            --delay: .15s;
            --radius: 16px;
            transition: border-top-left-radius var(--dur) var(--delay) ease-out, border-top-right-radius var(--dur) calc(var(--delay) * 2) ease-out, border-bottom-right-radius var(--dur) calc(var(--delay) * 3) ease-out, border-bottom-left-radius var(--dur) calc(var(--delay) * 4) ease-out, box-shadow calc(var(--dur) * 4) ease-out, transform calc(var(--dur) * 4) ease-out, background calc(var(--dur) * 4) steps(4, jump-end);
        }

            .button-arounder:hover,
            .button-arounder:focus {
                box-shadow: 0 4px 8px hsla(190deg, 15%, 5%, .2);
                transform: translateY(-4px);
                background: #93BFA3;
                border-top-left-radius: var(--radius);
                border-top-right-radius: var(--radius);
                border-bottom-left-radius: var(--radius);
                border-bottom-right-radius: var(--radius);
            }
    </style>
</head>
<body>
    <div style="display:flex; flex-direction:column; align-items:center; justify-content:center; width:100%; height:100%; gap:10px">

        <div style="background-color:#93BFA3;; width: 75%; border-radius: 5px; padding: 10px">
            <h1 id="toName" style="color:white"></h1>
        </div>

        <div id="messages" style="background:#fdf5e6; width:75%; height:500px; max-height:500px; overflow:auto;">
        </div>

        <div style="width:75%; height:50px; display:flex; background-color: #93BFA3">
            <div style="display:flex; justify-content:start; width:85%; height:100%; padding: 10px">
                <input type="text" placeholder="Bir mesaj yazınız" id="txtMessage" style="width:100%">

            </div>
            <div style="display:flex; justify-content:end; width:15%;  height:100%; padding: 10px">
                
                <button class="button-arounder" id="btnSendMessage">Send Message</button>
            </div>
        </div>
    </div>
</body>
</html>